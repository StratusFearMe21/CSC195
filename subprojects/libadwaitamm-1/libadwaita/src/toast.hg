/* Copyright (c) 2019  Roger Ferrer <rofirrim@gmail.com>
 *
 * This file is part of libadwaitamm.
 *
 * libadwaitamm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * libadwaitamm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(libadwaitamm,libadwaita)
_CONFIGINCLUDE(libadwaitammconfig.h)
_PINCLUDE(glibmm/private/object_p.h)

#include <glibmm.h>
#include <gtkmm.h>

#include <libadwaita-1/adwaita.h>

namespace Adw
{

class Toast : public Glib::Object {
  _CLASS_GOBJECT(Toast, AdwToast, ADW_TOAST, Glib::Object, GObject)
  _STRUCT_NOT_HIDDEN
  _DO_NOT_DERIVE_GTYPE

protected:
  _CTOR_DEFAULT
  _IGNORE(adw_toast_new_format)

public:
  _WRAP_ENUM(Priority, AdwToastPriority)

  _WRAP_CTOR(Toast(const Glib::ustring& title), adw_toast_new)

  _WRAP_METHOD(void dismiss(), adw_toast_dismiss)
  _WRAP_METHOD(Glib::ustring get_action_name() const, adw_toast_get_action_name)
  _WRAP_METHOD(Glib::ustring get_button_label() const, adw_toast_get_button_label)
  _WRAP_METHOD(Gtk::Widget* get_custom_title() const, adw_toast_get_custom_title)
  _WRAP_METHOD(Toast::Priority get_priority() const, adw_toast_get_priority)
  _WRAP_METHOD(guint get_timeout() const, adw_toast_get_timeout)
  _WRAP_METHOD(Glib::ustring get_title() const, adw_toast_get_title)

  _WRAP_METHOD(void set_action_name(const Glib::ustring &action_name), adw_toast_set_action_name)
  _WRAP_METHOD(void set_button_label(const Glib::ustring &button_label), adw_toast_set_button_label)
  _WRAP_METHOD(void set_custom_title(Gtk::Widget *widget), adw_toast_set_custom_title)
  _WRAP_METHOD(void set_detailed_action_name(const Glib::ustring& detailed_action_name), adw_toast_set_detailed_action_name)
  _WRAP_METHOD(void set_priority(Priority priority), adw_toast_set_priority)
  _WRAP_METHOD(void set_timeout(guint timeout), adw_toast_set_timeout)
  _WRAP_METHOD(void set_title(const Glib::ustring& title), adw_toast_set_title)

#m4 _CONVERSION(`GVariant*',`Glib::VariantBase',`Glib::wrap($3,true)')
  _WRAP_METHOD(Glib::VariantBase get_action_target_value() const, adw_toast_get_action_target_value)
  _WRAP_METHOD(void set_action_target_value(const Glib::VariantBase &target_value), adw_toast_set_action_target_value)

  _WRAP_PROPERTY("action-name", Glib::ustring)
  _WRAP_PROPERTY("action-target", Glib::VariantBase)
  _WRAP_PROPERTY("button-label", Glib::ustring)
  _WRAP_PROPERTY("custom-title", Gtk::Widget*)
  _WRAP_PROPERTY("priority", Toast::Priority)
  _WRAP_PROPERTY("timeout", guint)
  _WRAP_PROPERTY("title", Glib::ustring)

  _WRAP_SIGNAL(void button_clicked(), "button-clicked", no_default_handler)
  _WRAP_SIGNAL(void dismissed(), "dismissed", no_default_handler)

  _IGNORE(adw_toast_set_action_target)
};

} // namespace Adw
